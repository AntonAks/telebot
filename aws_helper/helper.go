package aws_helper

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math/rand"
	"os"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
)

type AWS_Settings struct {
	AWS_S3_BUCKET_NAME    string
	AWS_ACCESS_KEY_ID     string
	AWS_SECRET_ACCESS_KEY string
}

func GetSettings() AWS_Settings {
	var a AWS_Settings
	a.AWS_S3_BUCKET_NAME = os.Getenv("AWS_S3_BUCKET_NAME")
	a.AWS_ACCESS_KEY_ID = os.Getenv("AWS_ACCESS_KEY_ID")
	a.AWS_SECRET_ACCESS_KEY = os.Getenv("AWS_SECRET_ACCESS_KEY")
	return a
}

func Prediction() string {

	item := "predictions_list.json"

	bucket := GetSettings().AWS_S3_BUCKET_NAME
	key_id := GetSettings().AWS_ACCESS_KEY_ID
	key_seret := GetSettings().AWS_SECRET_ACCESS_KEY

	sess, _ := session.NewSession(&aws.Config{
		Region: aws.String("eu-central-1"),

		Credentials: credentials.NewStaticCredentials(key_id, key_seret, ""),
	},
	)

	s3Client := s3.New(sess)

	requestInput := &s3.GetObjectInput{
		Bucket: aws.String(bucket),
		Key:    aws.String(item),
	}
	result, err := s3Client.GetObject(requestInput)
	if err != nil {
		fmt.Println(err)
	}

	body1, err := ioutil.ReadAll(result.Body)
	if err != nil {
		fmt.Println(err)
	}
	bodyString1 := fmt.Sprintf("%s", body1)

	// log.Println(bodyString1)

	type AutoGenerated struct {
		PredictionsList []string `json:"predictions_list"`
	}

	var s3data AutoGenerated
	decoder := json.NewDecoder(strings.NewReader(bodyString1))
	err = decoder.Decode(&s3data)
	if err != nil {
		fmt.Println("was an error")
	}

	rand.Seed(time.Now().Unix())
	n := rand.Int() % len(s3data.PredictionsList)

	return s3data.PredictionsList[n]
}

func Wisdom() string {

	item := "aphorisms.json"
	bucket := GetSettings().AWS_S3_BUCKET_NAME
	key_id := GetSettings().AWS_ACCESS_KEY_ID
	key_seret := GetSettings().AWS_SECRET_ACCESS_KEY

	sess, _ := session.NewSession(&aws.Config{
		Region:      aws.String("eu-central-1"),
		Credentials: credentials.NewStaticCredentials(key_id, key_seret, ""),
	},
	)

	s3Client := s3.New(sess)

	requestInput := &s3.GetObjectInput{
		Bucket: aws.String(bucket),
		Key:    aws.String(item),
	}
	result, err := s3Client.GetObject(requestInput)
	if err != nil {
		fmt.Println(err)
	}

	body1, err := ioutil.ReadAll(result.Body)
	if err != nil {
		fmt.Println(err)
	}
	bodyString1 := fmt.Sprintf("%s", body1)

	type Aphorisms []struct {
		QuoteHash   int64  `json:"quoteHash"`
		QuoteText   string `json:"quoteText"`
		QuoteAuthor string `json:"quoteAuthor"`
	}

	var s3data Aphorisms
	decoder := json.NewDecoder(strings.NewReader(bodyString1))
	err = decoder.Decode(&s3data)
	if err != nil {
		fmt.Println("was an error")
	}

	rand.Seed(time.Now().Unix())
	n := rand.Int() % len(s3data)

	return s3data[n].QuoteText + "\n" + s3data[n].QuoteAuthor
}
